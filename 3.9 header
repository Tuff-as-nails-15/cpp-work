//figure 3.8 Account.h 
//Account class with name and balance data members, and a constructor
//and a deposit function that each perfom validation.
#include<string> 
#include<iostream>
using namespace std;

class Account {
public:
		//Account constructor with two parameters
		Account(std::string accountName, int initialBalance)
		  : name{accountName} { //assign accountName to date member name

		//validate that the initialBalance is greater than 0; if not,
		//data member balance keeps its defaul initial calue of 0
		if (initialBalance > 0) { // if the intialBalance is valid
			balance = initialBalance; //assign it to data member balance
		}
	}

	// function that deposits (adds) only a valid amount to the balance 
	void deposit(int depositAmount) {
		if (depositAmount > 0) {// if the depositAmount is valid
			balance = balance + depositAmount; // add it to the balance 
		}
	}

	// function that withdraws (subtracts) only a valid amount to the balance 
	void withdraw(int withdrawAmount) {
		if (withdrawAmount > balance) {
			cout << "\nwithdrawal amount exceeded account balance.";
		}
		else if (withdrawAmount > 0) {// if the withdrawAmount is valid
			balance = balance - withdrawAmount; // add it to the balance 
		}
	}

	//function returns the account balance 
	int getBalance() const {
		return balance;
	}

	// function that sets the name
	void setName(std::string accountName) {
		name = accountName;
	}

	// function that returns the name 
	std::string getName() const {
		return name;
	}
private:
	std::string name; //account name data member 
	int balance{ 0 }; // data member with default initial value
}; // end calss account
